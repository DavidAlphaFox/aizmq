%% This Source Code Form is subject to the terms of the Mozilla Public
%% License, v. 2.0. If a copy of the MPL was not distributed with this
%% file, You can obtain one at http://mozilla.org/MPL/2.0/.

-module(chumak_acceptance_error_handler_curve).
-include_lib("eunit/include/eunit.hrl").

-define(PORT, 3010).

%% Matching private and secret key, generated by nacl:box_keypair().
-define(PK, <<88,81,231,252,129,41,117,194,22,78,132,89,111,97,130,200,
              56,248,239,34,254, 93,19,12,241,238,126,248,251,254,214,10>>).
-define(SK, <<68,113,186,69,207,180,223,213,66,133,138,124,102,34,204,226,
              174,85,89,65,233, 202,180,173,253,181,73,78,121,87,220,133>>).
-define(WRONG_KEY, <<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
              174,85,89,65,233, 202,180,173,253,181,73,78,121,87,220,133>>).

single_test_() ->
    [
     {
       "Should not start connection if security mechanism does not match",
       {setup, fun start/0, fun stop/1, fun mechanism_mismatch/1}
     },
     {
       "Should not start connection if server key is not correct",
       {setup, fun start/0, fun stop/1, fun wrong_key/1}
     }
    ].

start() ->
    application:ensure_started(chumak),
    {ok, ServerPid} = chumak:socket(pull),
    ok = chumak:set_socket_option(ServerPid, curve_server, true),
    ok = chumak:set_socket_option(ServerPid, curve_secretkey, ?SK),
    {ok, _BindPid} = chumak:bind(ServerPid, tcp, "localhost", ?PORT),
    ServerPid.

stop(Pid) ->
    gen_server:stop(Pid),
    application:stop(chumak).

mechanism_mismatch(_ServerPid) ->
    null_client(),
    Message = receive
                  {peer_finish, Msg} ->
                      Msg;
                  Other ->
                      Other
              end,
    [
     ?_assertMatch({server_error, "Security mechanism mismatch"}, Message)
    ].

null_client() ->
    Parent = self(),
    spawn(
      fun () ->
              process_flag(trap_exit, true),
              {ok, Socket} = chumak:socket(push),
              {ok, PeerPid} = chumak:connect(Socket, tcp, "localhost", ?PORT),
              link(PeerPid), %% to wait modifications
              receive
                  {'EXIT', PeerPid, {shutdown, Reason}} ->
                      Parent ! {peer_finish, Reason};
                  Other ->
                      Parent ! {other, Other}
              end
      end
     ).

wrong_key(_ServerPid) ->
    client_with_wrong_key(),
    Message = receive
                  {peer_finish, Msg} ->
                      Msg;
                  Other ->
                      Other
              end,
    [
     ?_assertMatch({server_error, {error, closed}}, Message)
    ].


client_with_wrong_key() ->
    Parent = self(),
    spawn(
      fun () ->
              process_flag(trap_exit, true),
              {ok, ClientSocket} = chumak:socket(push),
              ok = chumak:set_socket_option(ClientSocket, curve_server, false),
              ok = chumak:set_socket_option(ClientSocket, curve_serverkey, ?WRONG_KEY),
              ok = chumak:set_socket_option(ClientSocket, curve_secretkey, ?SK),
              ok = chumak:set_socket_option(ClientSocket, curve_publickey, ?PK),
              {ok, PeerPid} = chumak:connect(ClientSocket, tcp, "localhost", ?PORT),
              link(PeerPid), %% to wait modifications
              receive
                  {'EXIT', PeerPid, {shutdown, Reason}} ->
                      Parent ! {peer_finish, Reason};
                  Other ->
                      Parent ! {other, Other}
              end
      end
     ).
